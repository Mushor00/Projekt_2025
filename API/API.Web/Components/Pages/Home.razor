@page "/"
@using API.ApiService.DB
@using API.ApiService.Filters
@using Microsoft.VisualBasic
@inject ISaleApiClient SaleApiClient
@rendermode InteractiveServer

<PageTitle>Sale</PageTitle>
<div class="d-flex flex-column justify-content-center align-items-center">
    <h1>Sale</h1>
</div>

<div class="container my-4">
    <h4>Filtry</h4>
    <div class="row g-2">
        <div class="col-md-3">
            <input class="form-control" @bind="filter.Numer" placeholder="Filtruj po numerze sali" />
        </div>
        <div class="col-md-3">
            <input class="form-control" @bind="filter.Budynek" placeholder="Filtruj po budynku" />
        </div>
        <div class="col-md-3">
            <input class="form-control" @bind="filter.Nazwa" placeholder="Filtruj po nazwie" />
        </div>
        <div class="col-md-3">
            <input type="number" class="form-control" @bind="filter.Pietro" placeholder="Filtruj po piętrze" />
        </div>
        <div class="col-md-3">
            <input type="number" class="form-control" @bind="filter.Pojemnosc" placeholder="Filtruj po pojemności" />
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="filter.Projektor">
                <option value="">Projektor</option>
                <option value="HDMI">HDMI</option>
                <option value="VGA">VGA</option>
                <option value="USB">USB</option>
                <option value="HDMI/VGA">HDMI/VGA</option>
                <option value="USB/VGA">USB/HDMI</option>
                <option value="USB/HDMI">USB/VGA</option>
                <option value="USB/HDMI/VGA">USB/HDMI/VGA</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="filter.Tablica">
                <option value="">Tablica</option>
                <option value="Multimedialna">Multimedialna</option>
                <option value="Suchoscierna">Suchościerna</option>
                <option value="Interaktywna">Interaktywna</option>
                <option value="Multimedialna/Suchościerna">Multimedialna/Suchościerna</option>
                <option value="Interaktywna/Multimedialna">Interaktywna/Multimedialna</option>
                <option value="Interaktywna/Suchościerna">Interaktywna/Suchościerna</option>
                <option value="Interaktywna/Multimedialna/Suchościerna">Interaktywna/Multimedialna/Suchościerna</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="filter.Klimatyzacja">
                <option value="">Klimatyzacja</option>
                <option value="1">Tak</option>
                <option value="0">Nie</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="filter.Komputerowa">
                <option value="">Sala komputerowa</option>
                <option value="1">Tak</option>
                <option value="0">Nie</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="filter.Ulica">
                <option value="">Filtruj po ulicy</option>
                <option value="Kilińskiego">Kilińskiego</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="filter.Niepelnosprawni">
                <option value="">Dla Niepełnosprawnych</option>
                <option value="1">Tak</option>
      
                
                <option value="0">Nie</option>
            </select>   
        </div>
        
        <div class="col-md-3">
            <select class="form-select" @bind="filter.Dostepnosc">
                <option value="">Dostepność</option>
                <option value="Dostępna">Dostępna</option>
                <option value="Zajęta">Zajęta</option>
            </select>
        </div>
        <div class="col-md-3">
            <button class="btn btn-primary" @onclick="ApplyFilters">Zastosuj Filtry</button>
            <button class="btn btn-danger" @onclick="ResetFilters">Usuń Filtry</button>
        </div>
    </div>
</div>

<div class="container my-1">
<table class="table table-striped-columns caption-top">
    <caption>Lista Sal</caption>
    <thead>
    <tr>
        <th scope="col">#</th>
        <th scope="col">Numer</th>
        <th scope="col">Budynek</th>
        <th scope="col">Nazwa</th>
        <th scope="col">Piętro</th>
        <th scope="col">Ulica</th>
        <th scope="col">Dostepność</th>
        <th scope="col">Szczegóły</th>
    </tr>

    </thead>
    <tbody>
            @{
                int lp = 1;
            }

            @if (sales is null)
            {
                <p>Brak Sal</p>
            }
            else
            {
                foreach (var item in sales)
                {
                    var currentLp = lp; // zapisujemy bieżącą wartość lp do zmiennej lokalnej

                    <tr>
                        <th scope="row">@currentLp</th>
                        <td>@item.Numer</td>
                        <td>@item.Budynek</td>
                        <td>@item.Nazwa</td>
                        <td>@item.Pietro</td>
                        <td>@item.Ulica</td>
                        <td>@item.Dostepnosc</td>
                        <td>
                            <button class="btn btn-sm btn-info" @onclick="@(() => ToggleDetails(currentLp))">
                                @(expandedRows.Contains(currentLp) ? "Ukryj" : "Rozwiń")
                            </button>
                        </td>
                    </tr>

                    @if (expandedRows.Contains(currentLp))
                    {
                        <tr>
                            <td colspan="7" class="bg-light">
                                <div class="row">
                                    <!-- Lewa kolumna -->
                                    <div class="col-md-5">
                                        <div><strong>Pojemność:</strong> @item.Pojemnosc</div>
                                        <div><strong>Projektor:</strong> @ProjektorText(item.Projektor)</div>
                                        <div><strong>Tablica:</strong> @TablicaText(item.Tablica)</div>
                                        <div><strong>Klimatyzacja:</strong> @(item.Klimatyzacja == 1 ? "Tak" : "Nie")</div>
                                        <div><strong>Sala komputerowa:</strong> @(item.Komputerowa == 1 ? "Tak" : "Nie")</div>
                                        <div><strong>Dla niepełnosprawnych:</strong> @(item.Niepelnosprawni == 1 ? "Tak" : "Nie")</div>
                                    </div>

                                    <!-- Środkowa kolumna -->
                                    <div class="col-md-4">
                                        <div><strong>Rezerwacja:</strong></div>
                                        <div><strong>Data:</strong> @currentDate.ToString("yyyy-MM-dd")</div>
                                        <div><strong>Od godz.:</strong> 10:00</div>
                                        <div><strong>Do godz.:</strong> 12:00</div>
                                        <div><strong>Nazwa Przedmiotu:</strong> Inzynieria Oprogramowania</div>
                                        <div><strong>Rezerwujący:</strong> Jan Kowalski</div>
                                    </div>

                                    <!-- Kalendarz -->
                                    <div class="col-md-3">
                                        <div class="calendar border p-2 rounded text-center">
                                            <div style="text-transform: capitalize"><strong>@currentDate.ToString("MMMM yyyy")</strong></div>
                                            <div class="d-flex flex-wrap justify-content-center">
                                                @for (int i = 1; i <= 31; i++)
                                                {
                                                    bool isReservedDay = (i == currentDate.Day);
                                                    <div class="m-1 px-2 py-1 border rounded @(isReservedDay ? "bg-primary text-white" : "bg-light")" style="width: 30px;">
                                                        @i
                                                    </div>
                                                    @* Tak CHYBA powinno wyglądać jak bedziemy dawać date rezerwacji z bazy. *@
                                                    @* bool isReservedDay = (i == item.DataRezerwacji.Day *@
                                                    @* && item.DataRezerwacji.Month == currentDate.Month *@
                                                    @* && item.DataRezerwacji.Year == currentDate.Year); *@

                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Przyciski pod spodem -->
                                <div class="mt-3 text-end">
                                    <a class="btn btn-primary me-2" href="/addSala">Zarezerwuj</a>
                                    <a class="btn btn-warning me-2" href="/editSala">Edytuj</a>
                                    <button class="btn btn-danger">Usuń Rezerwację</button>
                                </div>

                            </td>
                        </tr>
                    }


                    lp++; // na końcu pętli, po wykorzystaniu lp
                }
            }
    
    
    </tbody>
</table>
</div>
@code {
    private List<Sale> sales;
    public DateOnly currentDate = DateOnly.FromDateTime(DateTime.Now);
    private SaleFilter filter = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            sales = await SaleApiClient.IGetSaleAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Błąd w komponencie: " + ex.Message);
        }
    }

    private async Task ApplyFilters()
    {
        try
        {
            sales = await SaleApiClient.GetFilteredSales(filter);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Błąd przy filtrowaniu: " + ex.Message);
        }
    }

    private async Task ResetFilters()
    {
        filter = new SaleFilter();
        await ApplyFilters();
    }

    private HashSet<int> expandedRows = new();
    private void ToggleDetails(int rowId)
    {
        if (expandedRows.Contains(rowId))
            expandedRows.Remove(rowId);
        else
            expandedRows.Add(rowId);
    }

        private string ProjektorText(int id)
        {
            return id switch
            {
                1 => "VGA",
                2 => "HDMI",
                3 => "HDMI, VGA",
                4 => "USB",
                5 => "USB, VGA",
                6 => "USB, HDMI",
                7 => "USB, HDMI, VGA",
                _ => "Brak"
            };
        }

        private string TablicaText(int id)
        {
            return id switch
            {
                1 => "Multimedialna",
                2 => "Suchościerna",
                3 => "Multimedialna, Suchościerna",
                4 => "Interaktywna",
                5 => "Interaktywna, Multimedialna",
                6 => "Interaktywna, Suchościerna",
                7 => "Interaktywna, Multimedialna, Suchościerna",
                _ => "Brak"
            };
        }



    /*
    Proejktor:
    0- Brak
    1- ProjektorVGA
    2- ProjektorHDMI
    3- 1+2
    4- ProjektorUSB
    5- 4+1
    6- 4+2
    7- 4+2+1

    Tablica:
    0- Brak
    1- TablicaMultimedialna
    2- TablicaSuchoscierna
    3- 1+2
    4- TablicaInteraktywna
    5- 4+1
    6- 4+2
    7- 4+2+1

    */
}