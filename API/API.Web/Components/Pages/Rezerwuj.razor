@page "/rezerwuj"
@inject ReservationApiClient Api
@inject NavigationManager Navigation

<h3>Nowa Rezerwacja</h3>

<EditForm Model="rezerwacja" OnValidSubmit="ZarezerwujSale">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Numer sali</label>
        <InputNumber class="form-control" @bind-Value="rezerwacja.NumerSali" />
    </div>

    <div class="mb-3">
        <label>Login</label>
        <InputText class="form-control" @bind-Value="rezerwacja.Login" />
    </div>

    <div class="mb-3">
        <label>Data od</label>
        <InputDate class="form-control" @bind-Value="rezerwacja.DataOd" />
    </div>

    <div class="mb-3">
        <label>Data do</label>
        <InputDate class="form-control" @bind-Value="rezerwacja.DataDo" />
    </div>

    <button class="btn btn-primary">Zarezerwuj</button>
</EditForm>

@if (!string.IsNullOrEmpty(wiadomosc))
{
    <div class="alert alert-info mt-3">@wiadomosc</div>
}

@code {
    private RezerwacjaRequest rezerwacja = new();
    private string wiadomosc = "";

    private async Task ZarezerwujSale()
    {
        var sukces = await Api.ZarezerwujSaleAsync(rezerwacja);
        wiadomosc = sukces
            ? "Rezerwacja zakończona sukcesem"
            : "Rezerwacja nie powiodła się — możliwy konflikt";
    }
}
