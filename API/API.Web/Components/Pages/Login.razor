@page "/login"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@inject IOsobyService OsobyService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject UserSessionService Session
@using API.Web.Components;

<PageTitle>Logowanie</PageTitle>
<nav class="navbar navbar-expand-lg" style="background-color: #073980;">
    <a style="color: #073980; height: 40px">.</a>
</nav>
<div class="d-flex flex-column justify-content-center align-items-center">
    <h1>Logowanie</h1>

    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div style="width: 300px;">
            <div class="mb-3">
                <label class="form-label">Adres e-mail</label>
                <InputText @bind-Value="loginModel.Username" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Username)" />
                @if (!string.IsNullOrWhiteSpace(loginModel.Username) && !string.IsNullOrWhiteSpace(ErrorMessage))
                {
                    <div class="text-danger">@ErrorMessage</div>
                }
            </div>

            <div class="mb-3">
                <label class="form-label">Hasło</label>
                <InputText @bind-Value="loginModel.Password" class="form-control" type="password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <button type="submit" class="btn btn-primary me-2">Zaloguj</button>
            <a class="btn btn-danger" href='/register' role="button">Zarejestruj się</a>
        </div>
    </EditForm>
</div>

@code {
    private LoginModel loginModel = new();
    private string ErrorMessage;
    private bool IsLoggingIn = false;

    private async Task HandleLogin()
    {
        IsLoggingIn = true;
        ErrorMessage = string.Empty;

        try
        {
            var (success, message) = await OsobyService.LoginAsync(loginModel.Username, loginModel.Password);

            if (success)
            {
                await Task.Delay(100);
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                ErrorMessage = message;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Wystąpił błąd: {ex.Message}";
        }
        finally
        {
            IsLoggingIn = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Login jest wymagany")]
        [EmailAddress(ErrorMessage = "Nieprawidłowy adres e-mail")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Hasło jest wymagane")]
        public string Password { get; set; }
    }
}
