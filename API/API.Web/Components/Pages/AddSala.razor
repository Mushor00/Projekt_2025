@page "/addSala"
@inject IReservationApiClient ReservationApi
@inject ISaleApiClient SaleApi
@inject NavigationManager Navigation
@using API.ApiService.Models
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer

<PageTitle>Dodaj Rezerwację</PageTitle>

<h1 class="text-center">Dodaj Rezerwację</h1>

<EditForm Model="rezerwacja" OnValidSubmit="ZarezerwujSale" FormName="AddReservationForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div style="max-width: 400px; margin: auto;">
        <div class="mb-3">
            <label class="form-label">Wybierz salę</label>
            <InputSelect class="form-select" @bind-Value="rezerwacja.IdSali" @bind-Value:format="0">
                <option value="0" selected disabled >-- wybierz --</option>
                @if (sale != null)
                {
                    @foreach (var s in sale)
                    {
                        <option value="@s.Id">@s.Nazwa (@s.Budynek)</option>
                    }
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Data</label>
            <InputDate class="form-control" @bind-Value="rezerwacja.Data" />
        </div>

        <div class="mb-3">
            <label class="form-label" >Godzina rozpoczęcia</label>
            <InputDate class="form-control" type="InputDateType.Time" data-val="true" data-val-required="Godzina rozpoczęcia jest wymagana" id="godzinaOd" name="godzinaOd" @bind-value="rezerwacja.DataOd" />
        </div>

        <div class="mb-3">
            <label class="form-label" >Godzina zakończenia</label>
            <InputDate class="form-control" type="InputDateType.Time" data-val="true" data-val-required="Godzina zakończenia jest wymagana" id="godzinaDo" name="godzinaDo" @bind-value="rezerwacja.DataDo" />
        </div>

        <div class="mb-3">
            <label class="form-label">Nazwa Przedmiotu</label>
            <InputText class="form-control" @bind-value="rezerwacja.NazwaPrzedmiotu" />
        </div>

        <div class="mb-3">
            <label class="form-label">Imię rezerwującego</label>
            <InputText class="form-control" @bind-value="rezerwacja.Imie" />
        </div>

        <div class="mb-3">
            <label class="form-label">Nazwisko rezerwującego</label>
            <InputText class="form-control" @bind-value="rezerwacja.Nazwisko" />
        </div>

        <div class="d-flex justify-content-between">
            <button type="submit" class="btn btn-primary">Dodaj</button>
            <a class="btn btn-danger" href="/">Anuluj</a>
        </div>

        @if (!string.IsNullOrEmpty(wiadomosc))
        {
            <div class="alert @(czyBlad ? "alert-danger" : "alert-success") mt-3">@wiadomosc</div>
        }
    </div>
</EditForm>

@code {
    private RezerwacjaRequest rezerwacja = new();

    private string wiadomosc = "";
    private bool czyBlad = false;
    
    
    private List<Sala>? sale;

    protected override async Task OnInitializedAsync()
    {
        rezerwacja.Data = DateOnly.FromDateTime(DateTime.Now);
        rezerwacja.DataOd = new TimeOnly(9, 0);
        rezerwacja.DataDo = new TimeOnly(10, 0);
        try
        {
            sale = await SaleApi.GetMappedSaleAsync();
            Console.WriteLine($"DEBUG: Załadowano {sale?.Count ?? 0} sal");
            if (sale != null && sale.Count > 0)
            {
                Console.WriteLine($"DEBUG: Pierwsza sala - Id: {sale[0].Id}, Nazwa: {sale[0].Nazwa}");
            }
        }
        catch (Exception ex)
        {
            wiadomosc = $"Błąd ładowania sal: {ex.Message}";
            czyBlad = true;
        }
    }

    private async Task ZarezerwujSale()
    {
        try
        {
            czyBlad = false;
            
            Console.WriteLine($"DEBUG: IdSali = {rezerwacja.IdSali}");
            
            if (rezerwacja.IdSali == 0)
            {
                wiadomosc = "Wybierz salę.";
                czyBlad = true;
                return;
            }

            if (string.IsNullOrWhiteSpace(rezerwacja.Imie))
            {
                wiadomosc = "Podaj imię rezerwującego.";
                czyBlad = true;
                return;
            }

            if (string.IsNullOrWhiteSpace(rezerwacja.Nazwisko))
            {
                wiadomosc = "Podaj nazwisko rezerwującego.";
                czyBlad = true;
                return;
            }

            if (rezerwacja.DataDo <= rezerwacja.DataOd)
            {
                wiadomosc = "Godzina zakończenia musi być późniejsza niż godzina rozpoczęcia.";
                czyBlad = true;
                return;
            }
            
            rezerwacja.Data = rezerwacja.Data;
            rezerwacja.DataOd = rezerwacja.DataOd;
            rezerwacja.DataDo = rezerwacja.DataDo;

               var (sukces, komunikat) = await ReservationApi.ZarezerwujSaleAsync(rezerwacja);

                wiadomosc = komunikat;
                czyBlad = !sukces;
        }
        catch (Exception ex)
        {
            wiadomosc = $"Wystąpił błąd: {ex.Message}";
            czyBlad = true;
        }
    }
}